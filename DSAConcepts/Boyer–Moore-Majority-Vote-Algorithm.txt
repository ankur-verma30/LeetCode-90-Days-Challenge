ðŸ”· What the Algorithm Does
âž¤ It finds a candidate element that might be the majority (appearing more than âŒŠn/2âŒ‹ times).
âž¤ But this candidate is not guaranteed to actually be the majority.
âž¤ Example: If there is no majority element, the algorithm will still return some element as a candidate.

ðŸ”· Why Verification Is Required
âž¤ Boyerâ€“Moore ensures that if a majority element exists, it will be the candidate.
âž¤ But if no element occurs > n/2 times, the algorithm may still return a number that isnâ€™t actually majority.
âž¤ Thatâ€™s why a final frequency check (verification step) is needed.

ðŸ”¹ Example Without Verification
nums = [1,2,3,4]

âž¤ Candidate chosen = 4 (depends on sequence).
âž¤ But no element appears more than n/2 = 2 times.
âž¤ Without verification â†’ returns 4 (wrong).

âž¤ With verification â†’ sees freq(4) = 1 which is â‰¤ 2 â†’ returns 0 (correct).

ðŸ”¹ Key Point
âž¤ Verification step is required only if problem statement does not guarantee existence of majority element.
âž¤ If problem guarantees a majority element (like in LeetCode 169), you can skip verification.